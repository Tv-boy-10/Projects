module fifo #(
    parameter DATA_WIDTH = 8,
    parameter DEPTH = 16,
    parameter ADDR_WIDTH = 4
)(
    input clk,
    input rst,
    input wr_en,
    input rd_en,
    input [DATA_WIDTH-1:0] din,
    output reg [DATA_WIDTH-1:0] dout,
    output full,
    output empty
);

    reg [DATA_WIDTH-1:0] fifo_mem [0:DEPTH-1];
    reg [ADDR_WIDTH-1:0] wr_ptr, rd_ptr;
    reg [ADDR_WIDTH:0] count; // one bit more to detect full

    assign full  = (count == DEPTH);
    assign empty = (count == 0);

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            wr_ptr <= 0;
            rd_ptr <= 0;
            count  <= 0;
            dout   <= 0;
        end 
        else begin
            // Write operation
            if (wr_en && !full) begin
                fifo_mem[wr_ptr] <= din;
                wr_ptr <= wr_ptr + 1;
                count <= count + 1;
            end

            // Read operation
            if (rd_en && !empty) begin
                dout <= fifo_mem[rd_ptr];
                rd_ptr <= rd_ptr + 1;
                count <= count - 1;
            end
        end
    end

endmodule
module fifo_tb;

    reg clk, rst, wr_en, rd_en;
    reg [7:0] din;
    wire [7:0] dout;
    wire full, empty;

    fifo uut (
        .clk(clk), .rst(rst),
        .wr_en(wr_en), .rd_en(rd_en),
        .din(din), .dout(dout),
        .full(full), .empty(empty)
    );

    // Clock generation
    always #5 clk = ~clk; // 10ns period

    initial begin
        // Monitor signals in simulation output
        $monitor("Time=%0t | wr_en=%b rd_en=%b din=%h dout=%h full=%b empty=%b",
                  $time, wr_en, rd_en, din, dout, full, empty);

        // Initialize signals
        clk = 0; rst = 1; wr_en = 0; rd_en = 0; din = 0;

        #10 rst = 0; // Release reset

        // Write 3 values into FIFO
        wr_en = 1; din = 8'hA1; #10;
        din = 8'hB2; #10;
        din = 8'hC3; #10;
        wr_en = 0;

        // Read 3 values back
        rd_en = 1; #30;
        rd_en = 0;

        #50 $stop;
    end

endmodule
